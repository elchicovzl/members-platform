// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

enum MemberRole {
  SUPERADMIN
  ADMIN
  MODERATOR
  GUEST
}

enum StatusGiveaway {
  BORRADOR
  ACTIVO
  TERMINADO
  CANCELADO
  ELIMINADO
}

enum TypeTransaction {
  MANUAL
  WEB
}

enum StatusTicket {
  DISPONIBLE
  REVISION
  VENDIDO
}

model Profile {
  id        String @id @default(uuid())
  userId    String @unique
  name      String
  email     String @db.Text

  role      MemberRole @default(MODERATOR)

  storeId      String
  store        Store     @relation("ProfileToStore", fields: [storeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Store {
  id         String @id @default(uuid())
  name       String
  userId     String

  giveaways  Giveaway[]  @relation("StoreToGiveaway")
  profiles Profile[] @relation("ProfileToStore")

  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Transaction {
  id         String @id @default(uuid())
  code       String
  imageSrc   String?
  storeId    String
  giveawayId String

  gatewayId  String?
  userId     String?
  username   String?
  email      String?
  fullname   String?
  type     TypeTransaction @default(WEB)

  isPaid   Boolean
  total    String

  giveway   Giveaway?  @relation("GiveawayToTransaction", fields: [giveawayId], references: [id])

  tickets  Ticket[]  @relation("TransactionToTicket")

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([giveawayId])
}

model Ticket {
  id              String @id @default(uuid())
  giveawayId      String
  storeId         String
  transactionCode String?
  transactionId   String?
  ticketNumber    String

  giveaway        Giveaway     @relation("GiveawayToTicket", fields: [giveawayId], references: [id])
  transaction     Transaction?  @relation("TransactionToTicket", fields: [transactionId], references: [id])
  status          StatusTicket @default(DISPONIBLE)
  userId          String?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([giveawayId])
  @@index([storeId])
  @@index([transactionId])
}
model Giveaway {
  id           String @id @default(uuid())

  name         String
  description  String
  qtyTickets   String
  imageSrc     String
  code         String

  status       StatusGiveaway @default(ACTIVO)
  giveawayDate DateTime
  price        String   @default("0")
  featured     Boolean  @default(false)

  storeId      String
  store        Store     @relation("StoreToGiveaway", fields: [storeId], references: [id])

  transaction  Transaction[]  @relation("GiveawayToTransaction")
  tickets      Ticket[]  @relation("GiveawayToTicket")

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([storeId])
}
